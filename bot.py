"""
Telegram bot for vacancy collection with Ozon Bank card referral
---------------------------------------------------------------
Setup:
1) Install dependencies:
   pip install aiogram==2.25.1 python-dotenv
   (optional for Google Sheets: gspread oauth2client)

2) Create a .env file in the same folder with these variables:
   BOT_TOKEN=your_bot_token_here
   REF_LINK=https://your-referral-link.example
   MANAGER_USERNAME=@your_manager_username   # shown as contact button
   ADMIN_CHAT_ID=123456789   # optional: your admin chat id for notifications

3) Run:
   python telegram_bot_aiogram.py

Behavior:
- User starts /start and submits –§–ò–û and –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
- Bot asks whether user already has Ozon Bank card; if no ‚Äî shows referral link.
- After user confirms they applied for the card, the bot shows "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞" and provides a button to contact the manager.
- Submissions are saved to submissions.csv with timestamp.

Customize messages and branding variables below.
"""

import logging
import os
import csv
from datetime import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# Load environment
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
REF_LINK = os.getenv('REF_LINK', 'https://example.com')
MANAGER_USERNAME = os.getenv('MANAGER_USERNAME', '@manager')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')  # optional

if not BOT_TOKEN:
    raise RuntimeError('Please set BOT_TOKEN in .env file')

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

CSV_FILE = 'submissions.csv'

# --- Bot copy / branding (edit these strings) ---
WELCOME_TEXT = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –ú—ã –∏—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é *–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –æ–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–æ–≤*\n"
    "\n"
    "üè† –†–∞–±–æ—Ç–∞: —É–¥–∞–ª—ë–Ω–Ω–æ\n"
    "‚è± –ì—Ä–∞—Ñ–∏–∫: –≥–∏–±–∫–∏–π\n"
    "üí∏ –í—ã–ø–ª–∞—Ç—ã: –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ\n"
    "\n"
    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É ‚Äî —ç—Ç–æ –∑–∞–π–º–µ—Ç –ø–∞—Ä—É –º–∏–Ω—É—Ç.")

ASK_NAME = "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, *–§–ò–û* –ø–æ–ª–Ω–æ—Å—Ç—å—é (–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):"
ASK_PHONE = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç):"
ASK_OZON = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–∞—Ä—Ç–∞ Ozon Bank? –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –≤—ã–ø–ª–∞—Ç:"

OZON_PROMO = (
    "–ú—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ–º —Å *Ozon Bank* ‚Äî —ç—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π.\n"
    "–ï—Å–ª–∏ —É –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–∞—Ä—Ç—ã Ozon Bank, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ—ë –±–µ—Å–ø–ª–∞—Ç–Ω–æ (3 –º–∏–Ω—É—Ç—ã).\n"
    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É Ozon* –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞—è–≤–∫—É –ø–æ —Å—Å—ã–ª–∫–µ.")

APPLICATION_SUBMITTED = (
    "üéâ *–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*\n"
    "–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n"
    "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.")

# --- States ---
class ApplyStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_ozon_status = State()
    waiting_for_card_confirmation = State()

# --- Utilities ---

def save_submission(data: dict):
    fieldnames = [
        'timestamp', 'tg_id', 'username', 'full_name', 'phone', 'has_ozon_card', 'card_applied', 'ref_link_used'
    ]
    exists = os.path.exists(CSV_FILE)
    with open(CSV_FILE, 'a', newline='', encoding='utf-8') as f:
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        if not exists:
            writer.writeheader()
        writer.writerow(data)

async def notify_admin(text: str):
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(ADMIN_CHAT_ID, text, parse_mode='Markdown')
        except Exception as e:
            logging.exception('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: %s', e)

# --- Keyboards ---

def main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É'))
    return kb

def contact_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True))
    kb.add(types.KeyboardButton('–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é'))
    return kb

def ozon_choice_keyboard():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton('–î–∞, –µ—Å—Ç—å', callback_data='ozon_yes'))
    kb.add(types.InlineKeyboardButton('–ù–µ—Ç, –æ—Ñ–æ—Ä–º–ª—é', callback_data='ozon_no'))
    return kb

def ozon_ref_keyboard():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É Ozon (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)', url=REF_LINK))
    kb.add(types.InlineKeyboardButton('–Ø –æ—Ñ–æ—Ä–º–∏–ª(–∞) –∫–∞—Ä—Ç—É', callback_data='card_done'))
    return kb

def manager_keyboard():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É', url=f'https://t.me/{MANAGER_USERNAME.lstrip("@")}'))
    return kb

# --- Handlers ---

@dp.message_handler(commands=['start', 'help'])
async def cmd_start(message: types.Message):
    await message.answer(WELCOME_TEXT, parse_mode='Markdown', reply_markup=main_keyboard())

@dp.message_handler(lambda m: m.text == '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
async def start_application(message: types.Message):
    await ApplyStates.waiting_for_name.set()
    await message.answer(ASK_NAME, reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=ApplyStates.waiting_for_name, content_types=types.ContentTypes.TEXT)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(full_name=name)
    await ApplyStates.waiting_for_phone.set()
    await message.answer(ASK_PHONE, reply_markup=contact_keyboard())

@dp.message_handler(lambda m: m.text == '–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é', state=ApplyStates.waiting_for_phone)
async def ask_manual_phone(message: types.Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:')

@dp.message_handler(content_types=types.ContentTypes.CONTACT, state=ApplyStates.waiting_for_phone)
async def process_contact(message: types.Message, state: FSMContext):
    contact = message.contact
    phone = contact.phone_number
    await state.update_data(phone=phone)
    await ApplyStates.waiting_for_ozon_status.set()
    await message.answer(ASK_OZON, reply_markup=ozon_choice_keyboard())

@dp.message_handler(lambda m: m.text and m.text.startswith('+'), state=ApplyStates.waiting_for_phone)
async def process_manual_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    await state.update_data(phone=phone)
    await ApplyStates.waiting_for_ozon_status.set()
    await message.answer(ASK_OZON, reply_markup=ozon_choice_keyboard())

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('ozon_'), state=ApplyStates.waiting_for_ozon_status)
async def process_ozon_choice(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    choice = callback.data.split('_', 1)[1]
    if choice == 'yes':
        # user already has card
        data = await state.get_data()
        submission = {
            'timestamp': datetime.utcnow().isoformat(),
            'tg_id': callback.from_user.id,
            'username': callback.from_user.username or '',
            'full_name': data.get('full_name', ''),
            'phone': data.get('phone', ''),
            'has_ozon_card': 'yes',
            'card_applied': 'n/a',
            'ref_link_used': ''
        }
        save_submission(submission)
        await notify_admin(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {submission}")
        await callback.message.answer(APPLICATION_SUBMITTED, parse_mode='Markdown', reply_markup=manager_keyboard())
        await state.finish()
    else:
        # user doesn't have card ‚Äî show referral
        await ApplyStates.waiting_for_card_confirmation.set()
        await callback.message.answer(OZON_PROMO, parse_mode='Markdown', reply_markup=ozon_ref_keyboard())

@dp.callback_query_handler(lambda c: c.data == 'card_done', state=ApplyStates.waiting_for_card_confirmation)
async def card_done(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer('–û—Ç–ª–∏—á–Ω–æ ‚Äî –ø–æ–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –∫–∞—Ä—Ç—É.')
    data = await state.get_data()
    submission = {
        'timestamp': datetime.utcnow().isoformat(),
        'tg_id': callback.from_user.id,
        'username': callback.from_user.username or '',
        'full_name': data.get('full_name', ''),
        'phone': data.get('phone', ''),
        'has_ozon_card': 'no',
        'card_applied': datetime.utcnow().isoformat(),
        'ref_link_used': REF_LINK
    }
    save_submission(submission)
    await notify_admin(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (–æ—Ñ–æ—Ä–º–∏–ª –∫–∞—Ä—Ç—É): {submission}")
    await callback.message.answer(APPLICATION_SUBMITTED, parse_mode='Markdown', reply_markup=manager_keyboard())
    await state.finish()

@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def fallback(message: types.Message):
    # Friendly catch-all
    await message.answer('–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É*.', parse_mode='Markdown', reply_markup=main_keyboard())

# --- Run ---
if __name__ == '__main__':
    print('Bot is starting...')
    executor.start_polling(dp, skip_updates=True)
